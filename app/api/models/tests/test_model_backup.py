from django.test import TestCase

from api.models import Backup
from django.db import IntegrityError


# Create your tests here.
class TestModelBackup(TestCase):

    def setUp(self):
        db = Backup.objects.all()
        db.delete()

    def test_create_empty_required_fields(self):
        with self.assertRaises(IntegrityError, msg="Non-Null constrain violated"):
            Backup.objects.create(name=None)

    def test_create_required_fields_only(self):
        Backup.objects.create(name="name")
        db = Backup.objects.all()
        self.assertEqual(len(db), 1, "Object not added to db")
        self.assertIsInstance(db[0].id, int, "Object has wrong autogenerated id")
        self.assertEqual(db[0].name, "name", "Error in field 'name'")
        self.assertIsNone(db[0].original_file_name, "Wrong default value in 'original_file_name'")

    def test_create_more_fields(self):
        b = Backup.objects.create(name="name", original_file_name="file", path="path")
        db = Backup.objects.all()
        self.assertEqual(len(db), 1, "Object not added to db")
        self.assertEqual(db[0].name, "name", "Error in field 'name'")
        self.assertEqual(db[0].original_file_name, "file",
                         "Error in field 'original_file_name'")
        self.assertEqual(db[0].path, "path", "Error in field 'path'")
        self.assertIsNone(db[0].description, "Wrong default value in 'description'")

    def test_delete(self):
        b = Backup.objects.create(name="name")
        db = Backup.objects.all()
        db.delete()
        self.assertEqual(len(db), 0, "Error while deleting")
